Project 2

fopen - function opens the file whose name is the string pointed to by pathname and associates a stream with it

fclose - function flushes the stream pointed to by stream  (writing any buffered output data using fflush(3)) and closes the underlying file descriptor.

fread - reads nmemb items of data, each size bytes  long, from the stream pointed to by stream, storing them at the  location given by ptr.

fwrite -  function writes from the array pointed to by ptr

fstat - function shall obtain information about an open file associated with the file descriptor fildes

fprintf- function places the output on the named output stream.

sprintf- sends formatted output to a string

2. routines: fget, memcpy, memset, printf, srtcmp 
   system calls: open, close, write, read, and exit.
   
3. statBuf.st_size == nSectorsPerDisk * nBytesPerSector - checks the disk to see if there is enough room to perform the process on the disk.

4. Five Identifiers 

1. In the shell.cpp the invokeCommand fucntion has a uint variable ok it's a bad name it should be renamed to something like checkCmd the way it's used in the code is as a boolean variable it checks to make sure the command is in the command table if not it sets it to 0 aka false.

2. In volume.cpp line 60 the function uint FileVolume::isOK this should be renamed to something like checkSuperBlock - isOk doesnt not really tell you what the function is checking

3. In directory.cpp the function uint okNameSyntax(byte *nm) - it's a soild name that explains what the function is doing a better techinical name for the function may be something like validNameSyntax.

4. In directory.cpp the function - void Directory::addLeafName(byte *newName, uint in) - the function adds the file newName with its inode number in to the current directory. A better name for this function would be something like AddFileInDir this explains cleary what the code accomplishes in the function.

5. In Inode.cpp line 60 the function - uint *Inodes::getInode(uint in, uint * ne) - this is a good name I would not change it. It explains what the code inside of the function is acomplishing 


5. Pre - post conditions

 pre:: Valid unixFilePath && non-existed fs33leaf && Valid initialized superBlock;;

post:: Verify the file exists in the file system, and if so reads the contents of newf,
and writes them to the file at "unixFilePath" in the UNIX file system*/
uint FileVolume::read33file(byte *fs33leaf, byte *unixFilePath)


pre:: Valid fs33leaf && non-existed and writable unixFilePath;;

post:: Verify the file exists in the file system, and if so writes the contents of each block to the Unix file, and returns the total number of bytes written to the Unix file uint FileVolume::write33file(byte *unixFilePath, byte *fs33leaf)










 
